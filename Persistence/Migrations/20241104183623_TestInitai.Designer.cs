// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241104183623_TestInitai")]
    partial class TestInitai
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CopyCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCalculatePrice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckFile")
                        .HasColumnType("bit");

                    b.Property<float>("MaxLength")
                        .HasColumnType("real");

                    b.Property<float>("MaxPage")
                        .HasColumnType("real");

                    b.Property<float>("MaxWidth")
                        .HasColumnType("real");

                    b.Property<float>("MinLength")
                        .HasColumnType("real");

                    b.Property<float>("MinPage")
                        .HasColumnType("real");

                    b.Property<float>("MinPrice")
                        .HasColumnType("real");

                    b.Property<float>("MinWidth")
                        .HasColumnType("real");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<float>("PrintMargin")
                        .HasColumnType("real");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.Entity.ProductAdType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductAdTypes");
                });

            modelBuilder.Entity("Domain.Entity.ProductAdt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsIsolated")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAdts");
                });

            modelBuilder.Entity("Domain.Entity.ProductAdtPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProductAdtId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductAdtId");

                    b.ToTable("ProductAdtPrices");
                });

            modelBuilder.Entity("Domain.Entity.ProductDeliver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDelivers");
                });

            modelBuilder.Entity("Domain.Entity.ProductDeliverSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductDeliverId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductDeliverId");

                    b.HasIndex("ProductSizeId");

                    b.ToTable("ProductDeliverSizes");
                });

            modelBuilder.Entity("Domain.Entity.ProductJeId", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("JeId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "JeId");

                    b.ToTable("ProductJeIds");
                });

            modelBuilder.Entity("Domain.Entity.ProductMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsIsolated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMaterials");
                });

            modelBuilder.Entity("Domain.Entity.ProductMaterialAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MaterialAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductMaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductMaterialId");

                    b.ToTable("ProductMaterialAttributes");
                });

            modelBuilder.Entity("Domain.Entity.ProductPrintKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductPrintKinds");
                });

            modelBuilder.Entity("Domain.Entity.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("Domain.Entity.ProductAdt", b =>
                {
                    b.HasOne("Domain.Entity.ProductAdType", "AdType")
                        .WithMany("ProductAdts")
                        .HasForeignKey("AdTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Product", "Product")
                        .WithMany("ProductAdts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entity.ProductAdtPrice", b =>
                {
                    b.HasOne("Domain.Entity.ProductAdt", "ProductAdt")
                        .WithMany("AdtPrices")
                        .HasForeignKey("ProductAdtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductAdt");
                });

            modelBuilder.Entity("Domain.Entity.ProductDeliver", b =>
                {
                    b.HasOne("Domain.Entity.Product", "Product")
                        .WithMany("ProductDelivers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entity.ProductDeliverSize", b =>
                {
                    b.HasOne("Domain.Entity.ProductDeliver", "ProductDeliver")
                        .WithMany("ProductDeliverSizes")
                        .HasForeignKey("ProductDeliverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entity.ProductSize", "ProductSize")
                        .WithMany("ProductDeliverSizes")
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDeliver");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("Domain.Entity.ProductJeId", b =>
                {
                    b.HasOne("Domain.Entity.Product", "Product")
                        .WithMany("ProductJeIds")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entity.ProductMaterial", b =>
                {
                    b.HasOne("Domain.Entity.Product", "Product")
                        .WithMany("ProductMaterials")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entity.ProductMaterialAttribute", b =>
                {
                    b.HasOne("Domain.Entity.ProductMaterial", "ProductMaterial")
                        .WithMany("ProductMaterialAttributes")
                        .HasForeignKey("ProductMaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductMaterial");
                });

            modelBuilder.Entity("Domain.Entity.ProductSize", b =>
                {
                    b.HasOne("Domain.Entity.Product", "Product")
                        .WithMany("ProductSizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entity.Product", b =>
                {
                    b.Navigation("ProductAdts");

                    b.Navigation("ProductDelivers");

                    b.Navigation("ProductJeIds");

                    b.Navigation("ProductMaterials");

                    b.Navigation("ProductSizes");
                });

            modelBuilder.Entity("Domain.Entity.ProductAdType", b =>
                {
                    b.Navigation("ProductAdts");
                });

            modelBuilder.Entity("Domain.Entity.ProductAdt", b =>
                {
                    b.Navigation("AdtPrices");
                });

            modelBuilder.Entity("Domain.Entity.ProductDeliver", b =>
                {
                    b.Navigation("ProductDeliverSizes");
                });

            modelBuilder.Entity("Domain.Entity.ProductMaterial", b =>
                {
                    b.Navigation("ProductMaterialAttributes");
                });

            modelBuilder.Entity("Domain.Entity.ProductSize", b =>
                {
                    b.Navigation("ProductDeliverSizes");
                });
#pragma warning restore 612, 618
        }
    }
}
